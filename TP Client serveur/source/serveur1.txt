/* =================================================================== */
// Progrmame Serveur qui calcule le résultat d'un coup joué à partir
// des coordonnées reçues de la part d'un client "joueur".
// Version ITERATIVE : 1 seul client/joueur à la fois
/* =================================================================== */

#include <stdio.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include "tresor.h"
#define nbPorteServeur 5555

/* =================================================================== */
/* FONCTION PRINCIPALE : SERVEUR ITERATIF                              */
/* =================================================================== */
int main(int argc, char **argv)
{
    char recievedCoordinate[4];
    int lengthMessage = 4;
    int tailleMat = 10;
    int coordLigneTres = 2;
    int coordColTres = 5;
    int lenMessage = 2; // length =2 un entier et un \0  ..
    char lesPointsChaine[2];
    int lesPoints = -1;
    int ligneCoordinate;
    int colCoordinate;

    // printf("TODO...\n");

    // if (argc != 3)
    //{
    //      printf("Erreur de Entrer ! \n");
    //      exit(1);
    //  }
    // char *Ipserveur = argv[1];
    // int nbPorteServeur = atoi(argv[2]);
    //  parametre de socket
    int servSocket;
    int domaine = AF_INET;
    int type = SOCK_STREAM;
    int protocIP = 0;
    // creation de socket
    servSocket = socket(domaine, type, protocIP);
    if (servSocket == -1)
    {
        printf("Erreur de creation de socket \n");
        exit(1);
    }
    // binding associer une adrese socket (IP et nbport au serveur)
    struct sockaddr_in addServeur;

    memset(&addServeur, 0, sizeof(addServeur));
    addServeur.sin_family = AF_INET;
    addServeur.sin_port = htons(nbPorteServeur);    /* host to network byte order */
    addServeur.sin_addr.s_addr = htonl(INADDR_ANY); /* any interface */

    if (bind(servSocket, (struct sockaddr *)&addServeur, sizeof(addServeur)) == -1)
    {
        perror("Bind error");
        close(servSocket);
        return EXIT_FAILURE;
    }

    // metre en ecoute listen and listen carefully
    // int sock;            /* descripteur de socket */
    int nbMaxdemand = 3; // combien ??
    int serveurEcout = listen(servSocket, nbMaxdemand);

    if (serveurEcout == -1)
    {
        perror("Listen error");
        close(servSocket);
        return EXIT_FAILURE;
    }
    // Accepter une connexion TCP entrante et créer une nouvelle socket dédiée à cette connexion

    struct sockaddr addrClient; // ?? addresse du client? ??
    socklen_t sizeAddClient = sizeof(addrClient);

    int socketClient = accept(servSocket, (struct sockaddr *)&addrClient, &sizeAddClient);

    if (socketClient < 0)
    {
        perror("accept failed");
        close(servSocket);
        exit(EXIT_FAILURE);
    }

    // do the treatement of the progr here·······

    // close(socketClient);
    while (lesPoints != 0)
    {

        // inf falgs = 0 ;
        printf("a\n");
        recv(socketClient, recievedCoordinate, lengthMessage, 0); // inf flags ?? =0
        printf("b %s\n", recievedCoordinate);
        ligneCoordinate = recievedCoordinate[0] - '0';
        colCoordinate = recievedCoordinate[2] - '0';
        printf(" c %d %d \n ", ligneCoordinate, colCoordinate);

        int reponseRecherTresor = recherche_tresor(tailleMat, coordLigneTres, coordColTres, ligneCoordinate, colCoordinate);
        printf(" d %d", reponseRecherTresor);
        lesPoints = reponseRecherTresor;

        sprintf(lesPointsChaine, "%d", lesPoints);
        send(socketClient, lesPointsChaine, lenMessage, 0); // client
    }

    close(servSocket); // ??? close

    return 0;
} // end main
